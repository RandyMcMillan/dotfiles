env:  # Global defaults
  CIRRUS_CLONE_DEPTH: 1
  PACKAGE_MANAGER_INSTALL: "apt-get update && apt-get install -y"
  MAKEJOBS: "-j10"
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  CI_FAILFAST_TEST_LEAVE_DANGLING: "1"  # Cirrus CI does not care about dangling processes and setting this variable avoids killing the CI script itself on error
  CCACHE_MAXSIZE: "200M"
  CCACHE_DIR: "/tmp/ccache_dir"
  CCACHE_NOHASHDIR: "1"  # Debug info might contain a stale path if the build dir changes, but this is fine

cirrus_ephemeral_worker_template_env: &CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV
  DANGER_RUN_CI_ON_HOST: "1"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system

# https://cirrus-ci.org/guide/persistent-workers/
#
# It is possible to select a specific persistent worker by label. Refer to the
# Cirrus CI docs for more details.
#
# Generally, a persistent worker must run Ubuntu 23.04+ or Debian 12+.
# Specifically,
# - apt-get is required due to PACKAGE_MANAGER_INSTALL
# - podman-docker-4.1+ is required due to the use of `podman` when
#   RESTART_CI_DOCKER_BEFORE_RUN is set and 4.1+ due to the bugfix in 4.1
#   (https://github.com/bitcoin/bitcoin/pull/21652#issuecomment-1657098200)
# - The ./ci/ depedencies (with cirrus-cli) should be installed:
#
#   ```
#   apt update && apt install screen python3 bash podman-docker curl -y && curl -L -o cirrus "https://github.com/cirruslabs/cirrus-cli/releases/latest/download/cirrus-linux-$(dpkg --print-architecture)" && mv cirrus /usr/local/bin/cirrus && chmod +x /usr/local/bin/cirrus
#   ```
#
# - There are no strict requirements on the hardware, because having less CPUs
#   runs the same CI script (maybe slower). To avoid rare and intermittent OOM
#   due to short memory usage spikes, it is recommended to add (and persist)
#   swap:
#
#   ```
#   fallocate -l 16G /swapfile_ci && chmod 600 /swapfile_ci && mkswap /swapfile_ci && swapon /swapfile_ci && ( echo '/swapfile_ci none swap sw 0 0' | sudo tee -a /etc/fstab )
#   ```
#
# - To register the persistent worker, open a `screen` session and run:
#
#   ```
#   RESTART_CI_DOCKER_BEFORE_RUN=1 screen cirrus worker run --labels type=todo_fill_in_type --token todo_fill_in_token
#   ```
#
# The following specific types should exist, with the following requirements:
# - small: For an x86_64 machine, recommended to have 2 CPUs and 8 GB of memory.
# - medium: For an x86_64 machine, recommended to have 4 CPUs and 16 GB of memory.
# - lunar: For a machine running the Linux kernel shipped with Ubuntu Lunar 23.04. The machine is recommended to have 4 CPUs and 16 GB of memory.
# - arm64: For an aarch64 machine, recommended to have 2 CPUs and 8 GB of memory.

# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks
filter_template: &FILTER_TEMPLATE
  skip: $CIRRUS_REPO_FULL_NAME == "bitcoin-core/gui" && $CIRRUS_PR == ""  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Unconditionally install git (used in fingerprint_script).
    - bash -c "$PACKAGE_MANAGER_INSTALL git"
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch --depth=1 $CIRRUS_REPO_CLONE_URL "pull/${CIRRUS_PR}/merge"
    - git checkout FETCH_HEAD  # Use merged changes to detect silent merge conflicts
                               # Also, the merge commit is used to lint COMMIT_RANGE="HEAD~..HEAD"

main_template: &MAIN_TEMPLATE
  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out
  ccache_cache:
    folder: "/tmp/ccache_dir"
  ci_script:
    - ./ci/test_run_all.sh

container_depends_template: &CONTAINER_DEPENDS_TEMPLATE
  << : *BASE_TEMPLATE
  container:
    # https://cirrus-ci.org/faq/#are-there-any-limits
    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel
    cpu: 2
    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers
    dockerfile: ci/test_imagefile  # https://cirrus-ci.org/guide/docker-builder-vm/#dockerfile-as-a-ci-environment
  base_depends_built_cache:
    folder: "/ci_container_base/depends/built"
    fingerprint_script: echo $CIRRUS_TASK_NAME $(git rev-parse HEAD:depends)

global_task_template: &GLOBAL_TASK_TEMPLATE
  << : *CONTAINER_DEPENDS_TEMPLATE
  << : *MAIN_TEMPLATE

compute_credits_template: &CREDITS_TEMPLATE
  # https://cirrus-ci.org/pricing/#compute-credits
  # Only use credits for pull requests to the main repo
  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != ""

task:
  name: 'lint [bookworm]'
  << : *BASE_TEMPLATE
  container:
    image: debian:bookworm
    cpu: 1
    memory: 1G
  # For faster CI feedback, immediately schedule the linters
  << : *CREDITS_TEMPLATE
  python_cache:
    folder: "/python_build"
    fingerprint_script: cat .python-version /etc/os-release
  unshallow_script:
    - git fetch --unshallow --no-tags
  lint_script:
    - ./ci/lint_run_all.sh
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: 'tidy [lunar]'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_tidy.sh"

task:
  name: 'ARM [unit tests, no functional tests] [bullseye]'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: arm64  # Use arm64 worker to sidestep qemu and avoid a slow CI: https://github.com/bitcoin/bitcoin/pull/28087#issuecomment-1649399453
  env:
    FILE_ENV: "./ci/test/00_setup_env_arm.sh"

task:
  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:jammy
      FILE_ENV: "./ci/test/00_setup_env_win64.sh"
  << : *CREDITS_TEMPLATE
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: '32-bit + dash [gui] [CentOS 9]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    docker_arguments:
      CI_IMAGE_NAME_TAG: "quay.io/centos/amd64:stream9"
      FILE_ENV: "./ci/test/00_setup_env_i686_centos.sh"
  # For faster CI feedback, immediately schedule one task that runs all tests
  << : *CREDITS_TEMPLATE
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV
    PACKAGE_MANAGER_INSTALL: "yum install -y"

task:
  name: '[previous releases, qt5 dev package and depends packages, DEBUG] [focal]'
  previous_releases_cache:
    folder: "releases"
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_qt5.sh"

task:
  name: '[TSan, depends, gui] [lunar]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    cpu: 4
    memory: 16G  # The default memory is too small, so double everything
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:lunar
      FILE_ENV: "./ci/test/00_setup_env_native_tsan.sh"
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: '[MSan, depends] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:jammy
      FILE_ENV: "./ci/test/00_setup_env_native_msan.sh"
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV
    MAKEJOBS: "-j4"  # Avoid excessive memory use due to MSan

task:
  name: '[ASan + LSan + UBSan + integer, no depends, USDT] [lunar]'
  enable_bpfcc_script:
    # In the image build step, no external environment variables are available,
    # so any settings will need to be written to the settings env file:
    - sed -i "s|\${CIRRUS_CI}|true|g" ./ci/test/00_setup_env_native_asan.sh
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: lunar  # Must use the lunar-specific worker (needed for USDT functional tests)
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_asan.sh"

task:
  name: '[fuzzer,address,undefined,integer, no depends] [lunar]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    cpu: 4  # Increase CPU and memory to avoid timeout
    memory: 16G
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:lunar
      FILE_ENV: "./ci/test/00_setup_env_native_fuzz.sh"
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: '[multiprocess, i686, DEBUG] [focal]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    cpu: 4
    memory: 16G  # The default memory is too small, so double everything
    docker_arguments:
      CI_IMAGE_NAME_TAG: "docker.io/amd64/ubuntu:focal"
      FILE_ENV: "./ci/test/00_setup_env_i686_multiprocess.sh"
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: '[no wallet, libbitcoinkernel] [focal]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:focal
      FILE_ENV: "./ci/test/00_setup_env_native_nowallet_libbitcoinkernel.sh"
  << : *CREDITS_TEMPLATE
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV

task:
  name: 'macOS 11.0 [gui, no tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    docker_arguments:
      CI_IMAGE_NAME_TAG: ubuntu:jammy
      FILE_ENV: "./ci/test/00_setup_env_mac.sh"
  env:
    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV
