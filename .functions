#!/usr/bin/env bash


#We agreed to the Qt open source license for you.
#If this is unacceptable you should uninstall.
#
#qt is keg-only, which means it was not symlinked into /usr/local,
#because Qt 5 has CMake issues when linked.
#
#If you need to have qt first in your PATH run:
#  echo 'export PATH="/usr/local/opt/qt/bin:$PATH"' >> /Users/git/.bash_profile
#
#For compilers to find qt you may need to set:
#  export LDFLAGS="-L/usr/local/opt/qt/lib"
#  export CPPFLAGS="-I/usr/local/opt/qt/include"
#
#For pkg-config to find qt you may need to set:
#  export PKG_CONFIG_PATH="/usr/local/opt/qt/lib/pkgconfig"
#
#==> Summary
#🍺  /usr/local/Cellar/qt/5.15.0: 10,574 files, 374.2MB

function geten0(){
ifconfig en0 | grep --word-regexp inet | awk '{print $2}'
}
function geten1(){
ifconfig en1 | grep --word-regexp inet | awk '{print $2}'
}

function iftop (){


    if hash geten0 2>/dev/null; then
DEVICE=en0
    fi
    if hash geten1 2>/dev/null; then
DEVICE=en1
    fi
    if [ -e /usr/local/sbin/iftop ];then
        sudo /usr/local/sbin/iftop -i $DEVICE
    else
        ./install-iftop.sh
    fi
}

function bitcoin-autogen (){
    ./autogen.sh
}
function bitcoin-configure-disable-tests-bench-fuzz(){
    ./configure --disable-tests --disable-bench --disable-fuzz
}

function bitcoin-configure-disable-wallet-tests-bench-fuzz(){
    ./configure --disable-wallet --disable-tests --disable-bench --disable-fuzz
}
function bitcoin-configure-disable-wallet-tests-bench(){
    ./configure --disable-wallet --disable-tests --disable-bench
}
function bitcoin-configure-disable-tests-bench(){
    ./configure --disable-tests --disable-bench
}

function bitcoin-make-appbundle (){
    rm -f src/bitcoind && rm -rf Bitcoin-Qt.app && rm -rf ~/Library/Saved\ Application\ State/org.bitcoinfoundation.Bitcoin-Qt.savedState && rm -rf ~/Library/Preferences/org.bitcoin.Bitcoin-Qt.plist && make appbundle && wait && ./Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -resetguisettings
}

function bitcoin-make-depends () {
    make -C depends
}

function bitcoin-dl-install-depends(){

    if [[ "$OSTYPE" == "linux-gnu" ]]; then

            apt install linuxbrew-wrapper
            apt install autoconf
            apt install libdb4.8++-dev
            apt -y install libboost libevent miniupnpc libdb4.8 qt libqrencode univalue libzmq3
            apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3
            apt install libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev
            apt install libminiupnpc-dev
            apt install libzmq3-dev
            apt install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools
            apt install libqrencode-dev

            ./contrib/install_db4.sh .
            ./autogen.sh && ./configure --disable-tests && make download install -C depends

    elif [[ "$OSTYPE" == "darwin"* ]]; then

        if hash brew 2>/dev/null; then
            brew install wget
            brew install curl
            brew install autoconf automake berkeley-db4 libtool boost miniupnpc pkg-config python qt libevent qrencode
            brew install librsvg
        else
            #example - execute script with perl
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            install-bitcoin-depends
        fi
        pushd ~/gui
        make download install -C depends
        ./autogen.sh && ./configure --disable-tests && make download install -C depends
        popd
        pushd ~/bitcoin
        make download install -C depends
        ./autogen.sh && ./configure --disable-tests && make download install -C depends
        popd
    fi
}

function git-fetch-branches(){
    git stash && export STASH=true || echo "no stash"
    git branch -q -r || grep -v '\->' || while read remote; do git branch -q "${remote#origin/}" "$remote" || echo skip $remote; done
    #git fetch --all  || echo skip && git pull --all || echo skip
    git fetch $1 $2 $3 || echo skip #&& git pull $1 $2 $3 || echo skip
    echo $STASH
    #if [[ $STASH == "true" ]];then echo $STASH; fi || echo nogo
    if [[ $STASH == "true" ]];then git stash list; fi || echo nogo
    #git stash pop || echo "no pop"
}
function git-add-remote-bitcoin-devs(){

git remote add marco-falke https://github.com/MarcoFalke/bitcoin-core-gui.git
git remote add jonatack https://github.com/jonatack/gui.git
git remote add jonas https://github.com/jonasschnelli/gui.git
git remote add hebasto https://github.com/hebasto/gui.git
git remote add fanquake https://github.com/bitcoin/bitcoin.git
git remote add laanwj https://github.com/laanwj/bitcoin.git

}
function gpg-recv-keys-bitcoin-devs(){

curl  -fsSL https://gist.githubusercontent.com/laanwj/8368525bba4d89488dd5a0418884d91d/raw/0ff5573bf5c0b932d2ca567f77fadf038816c7b8/keys.txt  -o  keys.txt

while read line; do gpg  --keyserver keyserver.ubuntu.com  --recv-key ${line:0:41}; done < keys.txt



}

function git-branch-D (){

if [ -z "$1" ]
    then

    git branch
    echo "try:"
    echo "git-branch-D *string*"
    #git branch -D $(git branch --list "$1")

else
    git branch -D $(git branch --list "$1")
fi

}
function git-checkout-b (){

    git checkout -b $(date +%s)/$(git rev-parse --short HEAD^1)/$(git rev-parse --short HEAD)
    if [ ! -z "$1" ]
    then
        git checkout -b $(git rev-parse --abbrev-ref HEAD)-$1
    fi

}

#function git-delete-local-branches(){
#
#git branch -D $(git branch --list "$1")
#
#}
#function git-delete-remote-branches(){
#
#git branch -r --list $1/* | sed "s/origin\///" | xargs -I {} git push origin --delete {}
#
#}

# Bitcoin IRC
function irc-bitcoin-core-dev(){
open https://webchat.freenode.net/\#bitcoin-core-dev
}
function irc-bitcoin(){
open https://webchat.freenode.net/\#bitcoin
}
function irc-bitcoin-commits(){
open https://webchat.freenode.net/\#bitcoin-core-dev
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
