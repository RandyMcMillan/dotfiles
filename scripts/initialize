#!/usr/bin/env bash
function report() {
#ENV VARS
OS=$(uname)
OS_VERSION=$(uname -r)
UNAME_M=$(uname -m)
ARCH=$(uname -m)
export OS
export OS_VERSION
export UNAME_M
export ARCH
echo OS:
echo "$OS" | awk '{print tolower($0)}'
echo OS_VERSION:
echo "$OS_VERSION" | awk '{print tolower($0)}'
echo UNAME_M:
echo "$UNAME_M" | awk '{print tolower($0)}'
echo ARCH:
echo "$ARCH" | awk '{print tolower($0)}'
echo OSTYPE:
echo "$OSTYPE" | awk '{print tolower($0)}'
}
function checkbrew() {
	echo "checkbrew"
    if hash brew 2>/dev/null; then
        if ! hash "$AWK" 2>/dev/null; then
			echo "! hash"
            brew install "$AWK"
        fi
        if ! hash git 2>/dev/null; then
			echo "! git"
            brew install git
        fi
        if ! hash nvm 2>/dev/null; then
			echo "! nvm"
			checknvm
        fi
        if ! hash node 2>/dev/null; then
			echo "! node"
            echo
            brew install nvm yarn
			source ~/.bashrc
			yarn global add gulp gulp-watch q @npmcli/fs #@mapbox/node-pre-gyp
			nvm install $NODE_VERSION && nvm use $NODE_VERSION
			nvm alias $NODE_ALIAS $NODE_VERSION

		else
			brew uninstall -f node
        fi

    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
		checkbrew

    fi
}
function checknvm() {

	echo "checknvm"

    if hash brew 2>/dev/null; then
        if ! hash curl 2>/dev/null; then
            brew install curl
        fi
        if ! hash nvm 2>/dev/null; then
            brew install nvm yarn
        fi
    else

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh)"
		checknvm

    fi
}
function checkraspi(){
    echo 'Checking Raspi'
    if [ -e /etc/rpi-issue ]; then
    echo "- Original Installation"
    cat /etc/rpi-issue
    fi
    if [ -e /usr/bin/lsb_release ]; then
    echo "- Current OS"
    lsb_release -irdc
    fi
    echo "- Kernel"
    uname -r
    echo "- Model"
    cat /proc/device-tree/model && echo
    echo "- hostname"
    hostname
    echo "- Firmware"
    /opt/vc/bin/vcgencmd version
}
if [[ "$OSTYPE" == "linux"* ]]; then
    #CHECK APT
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-musl" ]]; then
        PACKAGE_MANAGER=apk
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        export AWK
        if hash apk 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
    if [[ "$OSTYPE" == "linux-arm"* ]]; then
        PACKAGE_MANAGER=apt
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK=gawk
        echo $AWK
        export AWK
        checkraspi
        if hash apt 2>/dev/null; then
            $PACKAGE_MANAGER $INSTALL $AWK
            report
        fi
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
        report
        PACKAGE_MANAGER=brew
        export PACKAGE_MANAGER
        INSTALL=install
        export INSTALL
        AWK="awk"
        export AWK
        #checkbrew
        # checknvm
elif [[ "$OSTYPE" == "cygwin" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "msys" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "win32" ]]; then
    echo TODO add support for "$OSTYPE"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo TODO add support for "$OSTYPE"
else
    echo TODO add support for "$OSTYPE"
fi
source ~/.bashrc
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm


function app_install(){

	echo "app_install"

#npm uninstall sqlite3@4
# yarn add fs-xattr@0.1.17
# yarn add fs-xattr@0.2.0
# yarn add fs-xattr@0.2.1
yarn add fs-xattr@0.3.0
# yarn add liftoff@0.6.2
# yarn add sqlite3@0
# yarn add sqlite3@1
# yarn add sqlite3@2.0.0
# yarn add sqlite3@3.0.0
# yarn add sqlite3@4
# yarn add sqlite3@4.1.1
# yarn add lodash@4.17.10
# yarn add @azure/abort-controller@1.0.0
# yarn add encoding@0.1
# yarn add electron@10
# yarn add iconv@3
# yarn add run-series@1.1.9
# yarn add hyperspace@0
# yarn add hyperspace@1
# yarn add hyperspace@2
# yarn add hyperspace@3


converter_install
}

function converter_install(){

	echo "converter_install"

pushd bg/dat/converter
echo 
# yarn add is-arrayish@0.2.1
# yarn add ecdsa-sig-formatter@1.0.11
# yarn add buffer-equal-constant-time@1.0.1
# yarn add spdx-license-ids@3.0.0
# yarn add math-random@1.0.1
# yarn add is-arrayish@0.2.1
# yarn add tslib@2.2.0

popd
}

function yarn-installs(){

    echo "yarn_installs"

if hash node 2>/dev/null; then
	echo "hash node"
test node && node -v
else
	echo "else not hash node"
	checknvm
fi
if hash yarn 2>/dev/null; then
yarn -v
else
	checknvm
fi

# yarn add @mapbox/node-pre-gyp
# yarn add node-pre-gyp
# yarn add node-gyp
# yarn add gulp
# 
# yarn add mysql@2.18.1 
# yarn add mssql@6.1.0
# yarn add mysql2@2.1.0
# 
# yarn add pg@7.18.2
# 
# yarn add sqlite3@4.1.1
# yarn add knex@0.20.0


if [[ "$OSTYPE" == *"arwin"* ]]; then
echo
fi
if [[ "$OSTYPE" == *"inux"* ]]; then
echo
fi



pushd ../app && app_install && popd

}
source ~/.bashrc
if hash nvm 2>/dev/null; then

	echo "hash nvm"
	echo "NODE_VERSION="$NODE_VERSION
	echo "NODE_ALIAS="$NODE_ALIAS

	nvm install $NODE_VERSION && nvm use $NODE_VERSION
	nvm alias $NODE_ALIAS $NODE_VERSION
else
	checknvm
fi
yarn-installs
